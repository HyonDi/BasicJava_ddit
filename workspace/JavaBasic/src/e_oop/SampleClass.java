package e_oop; //현재클래스가 어디에있는지 위치를 알려준다.
//oop랑 같이 움직임
//main 메서드 없음.

import java.util.Scanner; //임포트자리. 패키지와 클래스 사이.
//같은패키지에있으면 같은이름의 클래스가 올 수 없지만 다른패키지에있느면 같은 이름의 클래스가 있을 수도 있으니까 위치를 알려주는거야.
//import java.util.*; //이렇게 별을 할수도있어.아스테리크를 하면, 자바점유틸에있는 모든 클래스를 사용하겠다는 뜻이야.
//
public class SampleClass {//퍼블릭 : 제한조건. 퍼블릭은 모두에게 열겠다는고야.클래스는 클래스 뒤에 이름을 붙이면 선언할 수 있따.
	
	int field = 10; // 전역 변수 : 클래스 전체 영역에서 공유하는 변수
//클래스바로 밑에있어. 메인 메서드 밖에있어. 지역변수는 메서드 안에있어!!!!!!!!!!
//	전역변수 =field
		/*메서드 : 코드를 분리해서 더 효율적인 프로그램을 만들기 위한 도구
		리턴타입 메서드명(파라미터){}
		리턴타입(반환타입) : 실행후 돌려줘여하는 결과물
		파라미터(매개변수) : 실행에 필요한 정보.(데이터를 넘겨주는 역할)
		*/
	
/*	메서드라는것은 코드를 분리해서 더 효율적인 프로그램을 만들기위한 도구야.
	근데 코드를 분리를 해야하는데, 어떤 데이터를 가지고 무언가를 할때. 
	메서드에는 사용하던 데이터를 주고받을수있는기능이 있ㄴ은데 그게바로 리턴타입과 파라미터이다.
	파라미터 = 메서드에 넘겨주는 데이터.
	넘겨줫으면 뭔가 또 받아야하니까 리턴타입이 돌려받는것이다.
	그런데 파라미터같은 경우에는 여러개를 보낼 수가 있다.
	그런데 리턴타입은 하나만 받을 수 있어.
	메서드에는 파라미터와 리턴타입이 있는데 이것은 데이터를 주고받기위한 것이다.
	*/
	
	
//	메서드를 몇개 만들어 보자.
	void method1() {
		System.out.println("파라미터도 리턴타입도 없는 메서드");
	}//앞에있는게 리턴타입(void) 파라미터는 소괄호 속. 지급ㅁ은 없다.
	//void 라는 것은 타입이 없다는 의미. 리턴타입이 없다는 것.
	//위의 메서드는 파라미터도, 리턴타입도 없는 메서드야.
	//샘플크래스라는
	
	void method2(int parameter){
		System.out.println(parameter + "를 사용해 명령을 수행하는 메서드");
	}//파라미터가 있따!!!!!!!!!!!!
	//변수선언하는거랑 똑같이.
	//이거는 보이드매소드2 의 메서드 안에서만 사용할 수 있는 지역변수야.
	
	String method3() {
		return"명령 수행 후 결과물을 돌려주는 메서드";
		}
		//return : 메서드를 종료시키고 결과물을 돌려준다.
		//리턴타입이 없는 메서드에서는 메서드를 종료시킨다.
		//얘는 타입만 적었다.(String)
	
		int method4(int a, int b){
			System.out.println(a + "," + b
					+ "를 사용해 명령을 수행하고 결과물을 돌려주는 메서드.");
		return a + b;
	}
	
	//메인메서드의 static 을 사용해서 메모리에 올라간상태. 
	//n메모리에ㅜ올렷따>ㅜ 뵉시ㅟㅂ에ㅜ한칸에 Sampleclass)();]	
	//,객체를 사용하기 위해서는 참조연산자 . 을 찍어야한다.
	//사용할 수 있는 변수와 0000둘 쭉 나온다.
	
		void test1 (){
			System.out.println("test1 시작"); //1
			test3();
			System.out.println("test1 종료");//6
		}
	
		void test2(){
			System.out.println("test2 시작");//3
			System.out.println("test2 종료");//4
		}
	
	
		void test3(){
			System.out.println("test3 시작");//2
			test2();
			System.out.println("test3 종료");//5
			
			
			
		}
}
