package e_oop;

public class JVM_Memory {
	/*<< JVM ( JAVA virtual Machine ) >>
	- 자바로 만들어진 프로그램이 실행되는 컴퓨터 안의 가상 컴퓨터
	- 운영체제 -> JVM -> 자바 프로그램
	- 장점 : 운영체제에 상관없이 실행할 수 있다.
	- 단점 : 속도가 느리다.
	
	
	<< JVM 메모리 구조 >>
	- Method Area : 클래스가 저장된다.
	- Call Stack : 현재 호출되어 있는 , 실행되고 있는 메서드가 저장된다.
	- Heap : 객체가 저장된다.
	*/
	
	/*JVM!
	컴퓨터안의 가상의 컴퓨터가 더 있다고 생각하면 돼.
	자바로 이루어진 프로그램은 이 JVM이라는 데에서 돌아간다.
	내 컴퓨터에서 돌아가는 것 같지만
	실제로는 가상의 컴퓨터에들어가서 실행이 되는것이다.
	
	운영체제에 상관없이 실행이 가능!!
	윈도우, 리눅스, 맥, ios, 등등의 os 가 있다.(운영체제)
	자바 외에 언어로 이루어진 프로그램은 운영체제에 맞춰 코드가 달라진다.
	그런데 자바로 만들어진 프로그램은 같은 코드로 모든 운영체제에서 실해이 될 수 있다.
	운영체제와  프로그램의 중간다리역할을 JVM이 해주기때문. 한 번 코드가 만들어지면 어디서나 실행이 가능하다.
	
	하지만 중간다리가 있어서 속도가 느림. 단점이 있기는 하지만
	지금 컴퓨터가 굉장히 빠르고 좋아져서 사람이 느낄 수 없는정도의 미미한 차이만 있대.
	
	
	JVM 메모리
	JVM에도 메모리가 있어.
	메서드 에어리어, 콜스택, 힙.
	메서드 에어리어에는 클래스의 정보가 저장됨.
	콜스택은 현재 호출되어있는 메서드들
	힙에는 객체가 저장된다.
	
	클래스 이름이 나오면 메모리에 올라간다.
	클레스 멤버들도 같이올라간다. 
	얘네가 올라가는 곳은 메소드 에어리어.
	
	그 클래스에서 어떤 메서드가 호출이 되면,
	콜스택이라는 메모리에서 실행이 되는것.
	
	인스턴스멤버를 사용하기위해서 객체생성을 한다. 그 객체가 힙에 저장이 됨.
	
	*
	클래스멤버와 인스턴스의 멤버가 저장되는곳이 다르다는 의미
	객체가 저장될 때 힙에 저장이 되는데, 객체를 여러개 생성되면 힙에 계속 여러개가 저장됨.
	그런데 클래멤버의 경우, 메서드에어리어에 한 번 저장이 되면 더는 들어가지 않음. 하나라는 뜻.
	객체가 몇개 만들어지든 스테이틱이붙은애들은 한 번 저장되고 다시는 저장되지 않는다.
	
	인스턴스애들은 생성될때마다 새로운애들이 저장됨.
	
	그래서 스테이틱애들은 값이 공유되고, 인스턴스는 공유되지않고 각자의 값을 유지한다.
	
	스테이틱이 붙으면 값을 공유, 객체생성을 하지 않음. 2가지!!
*/	
	

	/*<<Call Stack>>
	
	
	|_________|
	|_________|
	|_________|
	|_________|
	|_________|
	|_________|
	
	이런 그릇. 데이터를 넣으면 밑에서부터 쌓이고, 나갈때는 위에서부터 나간다. 이걸 스택구조라고 부름.
	
	|____________|
	|____________|
	|____________|
	|_method2()__|
	|_method1()__|
	|_main()_____|
	
	메인이 실행되며 메서드 1이 실행되고, 메서드 1에서 메서드 2가 실행이되고, 실행이 끝나면 메서드 2부터 나가고, 다시 메서드1실행됐다가 끝나면 메인으로돌아오고 끝난다.
	*/
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
