package e_oop;

public class VariableInit {
/*	변수를 초기화하는 방법에대해 알아봅시다.
	3가지 방법이 있어염
	
	가장 쉽게할 수 있는건 명시적 초기화.*/
	int var = 10;
	/*이로케.
	
	선언함과 동시에 초기화하는것을 명시적 초기화라고 한다.
	
	다른 방법으로는 초기화 블럭 : 여러 문장이 필요한 초기화를  해야할 때 사용한다.
	중괄호를 열어주면 초기화 블럭이 된다.
	명시적초기화는 딱 숫자만 입력해야하지만, 초기화블럭은 여러가지 문장을 작성할 수 있다.
	어떤 로직에 따라서, 흐름에따라서 변수를 초기화해야할때에는 초기화 블럭을 사용하면 돼.
	*/
	
	//초기화블럭의 예
	 {
		for (int i = 1; i <= 10; i++){
			var +=i;
		}
			
	}

	/*<<생성자>>
	-클래스와 같은 이름의 메서드
	-객체를 생성하면서 필요한 작업이 있을 때 사용한다. (인스턴스 변수 초기화)
	- 파라미터를 받아서 초기화 하고 싶을 때 사용한다.
	- 클래스에 생성자는 반드시 하나 이상 존재해야 한다.
	- 직접 선언해주지 않으면 컴파일러가 기본 생성자를 만들어 준다.
	- 생성자는 리턴타입이 없다.
	*/
//	클래스명적고 괄호 열고닫고한것이 생성자를 호출한 것이다.
//	바로 이름으로 시작 하고 뒤에 괄호를 붙여줌.
	
//	생성자이름은 클래스 이름과 동일해야한다.  파라미터도 넣었다. 초기화하고싶은 변수는 클래스의 전역변수(인스턴스변수)
/*	VariableInit(int var){
		for( int i = 1; i <= var; i ++){
			var += i;
		}
	}
*/	//전역변수의 이름과 지역변수 이름이 같아! 이럴때엔 어떻게 구분할까?
	
	VariableInit(int var){
		for( int i = 1; i <= var; i ++){
			this.var += i;
		}
	}
//this 가 없는건 지역변수. 파라미터.   this 가 붙으면 전역변수. 인스턴스변수 이다.!
	
	/*this: 클래스의 인스턴스 주소가 저장된 변수.
	인스턴스 변수와 지역변수의 이름이 같을 때 둘을 구분하기 위해
	인스턴스 변수 앞에 붙여서 사용한다.
	*/
	
	//생성자를 만들어서 변수를 초기화해 보았습니다!
	//컴파일러가 만들어주는 기본적인 생성자는 파라미터가 없어. 근데 우리가 만든건 파라미터가 있다.
	//우리가 하나 만들면 컴파일러가 안만들어준다.
	//현재 우리가 만든 생성자는 파라미터를 넣어야하는데 이게 귀찮을 수도있잖아. 그래서 파라미터 없는것도 하나 만들거야.
	
	//생성자뿐아니라메서드들도 같은 이름이 존재할 수 있어. 이걸 오버로딩이라고 불러.
	//같은 이름의 메서드를 정의하는 것. 파라미터의 갯수나 타입이 달라야 한다.!!!☆
	
	VariableInit(){
		/*for( int i = 1;  i >= 10;i++){
			this. var += i ;
		}*/
		
		this(100);
	}
	
	
	//생성자에서 다른 생성자 호출할때에는 this(); 로 생성을 한다.
	//주석처리한 부분과 같은 결과를 내기 위해서 this(100); 이라고 파라미터로 100을 넣었다.
	// 이제 파라미터가 1개인 생성자를 찾아 돌아다니다가 100 의 값을 넣고 실행시킬거야.
	/*this () : 생성자에서 자른 생성자를 호출 할 때 사용한다.
	this () 이전의 코드가 의미없는 코드가 될 수 있기 때문에 this() 는 생성자의 첫 줄에서만 사용할 수 있다.
	*/
	
	/*여기서 우리가 알아야할것
	1. 전역변수 초기화 방법: 명시적, 초기화블럭, 생성자.
	2. 오버로딩 : 같은 이름의 메서드를 정의 하는 것. 파라미터의 갯수나 타입이 달라야 한다.
	3. this : 두 가지의 this 를 언제 사용하는지.
	*/
	
//	생성자를 사용해서 변수를 만들 수 있다.! 를 알고있으면 됨.
//	가장 중요한 내용 : 생성자! 왜사용하는지 알아야해.매개변수가 여러개일 수도 있오. 중간에 매개변수를 사용하는것도 가능해


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
