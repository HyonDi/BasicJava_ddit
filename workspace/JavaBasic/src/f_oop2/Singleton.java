package f_oop2;
//싱글톤 패턴 : 객체의 생성을 제한하여 하나의 객체만 사용하게 하는 디자인 패턴중의 하나.
//객체들간에 객체를 공유하기 위해 사용한다.
//왜 하나만있어야하는데?
//1. 객체를 여러개사용할 필요가 없는경우.
//2. 그래서 메모리를 낭비할필요없으니까.
//3. 객체에들어있는 모든 변수를 공유할수있따


//디자인패턴 : 클래스를 설계할때에 설계하는 패턴!
public final class Singleton {
	
	private static Singleton instance;
	
	//흔히접할수있는 웹사이트를 콘솔로 만들어봅니다... 콘솔로 어떻게만들어??
	//배달의민족을 콘솔로 만든다. 하는 느낌. 1월2일 발표!!!
	
	
	//객체생성을 막아봅시다.
	//객체생성시 생성자에 private 를 붙여서 다른 클래스에서 객체생성하는 것을 막는다. //객체생성하려면 생성자를 호출해야하는데 호출을 못하니까.
	//신기하당
	//클래서에 final 을 붙이면 상속받지못하게해. 다른데서 상속받을 수 없음. 
	//굉장히 많이 사용됨. 왜야
	
	private Singleton(){
		
	}
	
	public static Singleton getInstance(){ //겟메서드에서 객체를 생성. 다른 클래스에서 이 클래스의 객체가 필요하면 저 인스턴스메서드를 호출해서 객체를 받을거임. 빌려주는것.
		//처음 객체생성이되었을때는 값이  null일테니까 처음에만 객체생성을 하게 해주고, 처음에 한번만!
		//그리고 두번째부터는 계속 똑같게 만듬. 싱글톤으로구성된건 다 getInstance 를 가지고있다. 명명규칙은아닌데 다들이렇게씀. 그럼규칙인듯
		
		if(instance == null){
			instance = new Singleton();
		}
		return instance;
	}
	
	
	
}
//싱글톤 패턴의 예
//프로젝트에서 예로들어주심.
//데이터베이스라는걸 만들거야. 데이터베이스랑 자바랑 연결은 고급자바에서 배울거임.
//데이터베이스를 클래스로 구현해서 사용할건데, 그때 데이터베이스라는 공간은 모든객체가 동일한 데이터를 공유해야해.
//데이터베이스라는 클래스를 만들어서 이거를 싱글톤으로 만들면 어디서든 똑같은 객체를 사용할 수 있는것. 
