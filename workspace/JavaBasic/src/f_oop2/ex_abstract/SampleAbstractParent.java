package f_oop2.ex_abstract;
	//  새로생김! //
public abstract class SampleAbstractParent {
/*
	<< 추상메서드 >>
	- 구현부(내용)가 없이 선언부만 존재하는 메서드이다.
	- abstract 리턴타입 메서드명();  --중괄호가 없다. 세미콜론으로 끝남. 앞에 abstract 라는 제어자가 붙는다.
	- 클래스 구현에 도움을 주기 위해 사용한다. 클래스구현???
	
	
	<< 추상클래스 >>
	- 추상메서드를 가진 클래스를 추상클래스라고 한다.
	- abstract class 클래스명{} - abstract 라는 키워드가 붙는다.
	- 추상클래스는 객체를 생성할 수 없고, 부모 클래스의 역할만 할 수 있다. 다른클래스가 얘를 상속받아서 구현을 해준다.
	
	
	내용이 없는 메서드를 물려받을 수 있는거야. 너는 이런 메서드를 만들어라. 하는게 추상클래스야. 
	물려받은 내용없는 메서드를 오버라이딩해서 구현시키는 것.
	왜쓰냐면 : 자식클래스가 여러개있는데 공통된 메서드, 변수를 묶기위해 부모클래스를 만드는거잖아.
	 그중에서 메서드가 동일한 이름의 메서드가 있는데,
	일부자식클래스들은 그 내용이 조금씩 다른거야. 동일한 메서드가있는데 내용이 다른거. 
	부모클래스에서 자식클래스에게 메서드내용을 각기다르게 물려줄 수 없으니
	내용은 너희가 만들렴! 하고 넘겨준것.
*/
	
	void method(){
		//일반적인 메서드
	}
	
	//추상메서드
	abstract void abstractMethod(); 

}

//추상메서드가있는 추상클래스를 상속받았다. 얘는 반드시!! 추상메서드를 구현해줘야함. 
class SampleAbstractChild extends SampleAbstractParent{

	
	//추상메서드를 상속받으면 반드시 구현해야 한다. 
	//상속받은 추상메서드를 추상메서드로 남겨두려면 클래스를 추상클래스로 변경해야한다.!!!!!
	@Override
	void abstractMethod() {
		
		
	}
	
}